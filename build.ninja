builddir = build
site = $builddir/site
tscdir = $builddir/tsc
wasmbindgendir = $builddir/wasm-bindgen

rule cp
    description = Copy $in to build directory
    command = cp $in $out

rule svg2png
    description = Rendering $in to ${size}px
    command = convert -background none -resize ${size}x${size} -define png:exclude-chunks=date,time $in $out

rule svg2ico
    description = Render $in to .ico
    command = convert -background none -define 'icon:auto-resize=16,24,32,64,128,256' $in $out

build $site/index.html: cp src/index.html
build $site/manifest.json: cp src/manifest.json
build $site/css/style.css: cp src/css/style.css
build $site/icons/icon.svg: cp icon.svg
build $site/icons/512px.png: svg2png icon.svg
    size = 512
build $site/icons/256px.png: svg2png icon.svg
    size = 256
build $site/icons/128px.png: svg2png icon.svg
    size = 128
build $site/icons/64px.png: svg2png icon.svg
    size = 64
build $site/favicon.ico: svg2ico icon.svg
build $site/images/warning.svg: cp src/images/warning.svg

rule tsc
    description = Compile TypeScript to JavaScript
    command = tsc --build --force src/scripts/main
    restat = true

rule support-no-bundler
    description = Support running $in in browser
    command = sed -e "s@import \(.*\) from [\"']\(.*\)[\"']@import \1 from './\2.js'@" -e '/^export/d' $in > $out

build build $builddir/tsc/main/main.js $builddir/tsc/main/tsconfig.tsbuildinfo $builddir/tsc/service-worker/worker.js $builddir/tsc/service-worker/tsconfig.tsbuildinfo: tsc src/scripts/main/main.ts src/scripts/service-worker/worker.ts | src/scripts/general-tsconfig.json src/scripts/main/tsconfig.json src/scripts/service-worker/tsconfig.json $wasmbindgendir/app.d.ts $wasmbindgendir/service_worker.d.ts
build $site/scripts/main.js: support-no-bundler $builddir/tsc/main/main.js
build $site/worker.js: support-no-bundler $builddir/tsc/service-worker/worker.js

rule cargo
    description = Compile crate $crate to WASM
    command = cargo build --release -p $crate --color=always --quiet
    depfile = $builddir/wasm32-unknown-unknown/release/$crate.d
    deps = gcc
    restat = true

rule wasm-bindgen
    description = Generate WASM bindings
    command = wasm-bindgen --target $target --out-dir $wasmbindgendir $in

build $builddir/wasm32-unknown-unknown/release/app.wasm: cargo Cargo.toml
    crate = app
build $wasmbindgendir/app_bg.wasm $wasmbindgendir/app_bg.wasm.d.ts $wasmbindgendir/app.d.ts $wasmbindgendir/app.js: wasm-bindgen $builddir/wasm32-unknown-unknown/release/app.wasm
    target = web
build $site/scripts/app_bg.wasm: cp $wasmbindgendir/app_bg.wasm
build $site/scripts/app.js: cp $wasmbindgendir/app.js

build $builddir/wasm32-unknown-unknown/release/service_worker.wasm: cargo src/wasm/service_worker/Cargo.toml
    crate = service_worker
build $wasmbindgendir/service_worker_bg.wasm $wasmbindgendir/service_worker_bg.wasm.d.ts $wasmbindgendir/service_worker.d.ts $wasmbindgendir/service_worker.js: wasm-bindgen $builddir/wasm32-unknown-unknown/release/service_worker.wasm
    target = web
build $site/service_worker_bg.wasm: cp $wasmbindgendir/service_worker_bg.wasm
build $site/service_worker.js: cp $wasmbindgendir/service_worker.js
